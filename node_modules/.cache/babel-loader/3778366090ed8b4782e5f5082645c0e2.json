{"ast":null,"code":"import { SIGNIN_ACTION_SUCCESS, SIGNIN_ACTION_FAIL, SIGNIN_ACTION_LOADING, TOGGLE_SIGNIN } from \"../constants/actionTypes\";\n\nconst signInAction = payload => {\n  return {\n    type: SIGNIN_ACTION_SUCCESS,\n    user: payload.user,\n    token: payload.token\n  };\n};\n\nconst signInActionFail = message => {\n  return {\n    type: SIGNIN_ACTION_FAIL,\n    message\n  };\n};\n\nconst signInActionSuccess = message => {\n  return {\n    type: SIGNIN_ACTION_SUCCESS,\n    message\n  };\n};\n\nconst signInLoading = loader => {\n  return {\n    type: SIGNIN_ACTION_LOADING,\n    loader\n  };\n};\n\nexport const toggleSignIn = showSignIn => {\n  return {\n    type: TOGGLE_SIGNIN,\n    showSignIn\n  };\n};\nexport const signIn = (password, email) => {\n  return async dispatch => {\n    if (email && password) {\n      await fetch(`${process.env.REACT_APP_BACKEND_URL}/auth/user/signin`, {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      }).then(response => response.json()).then(response => response.status === \"success\" ? (console.log(\"Welldone Genius you rememebered your login credentials!\"), dispatch(signInAction(response.data)), dispatch(signInActionSuccess(\"Login Success!\")), setTimeout(() => {\n        window.location.reload(true);\n      }, 2000)) : dispatch(signInLoading(false)), dispatch(signInActionFail(\"Invalid Email or Password\")));\n    } else {\n      dispatch(signInActionFail(\"Please fill all fields\")), setTimeout(() => {\n        dispatch(signInActionFail(false));\n      }, 2000);\n    }\n\n    ;\n  };\n};","map":{"version":3,"sources":["C:/Users/user-pc/Desktop/cw/Dae-Alright-Frontend/src/redux/actions/user.js"],"names":["SIGNIN_ACTION_SUCCESS","SIGNIN_ACTION_FAIL","SIGNIN_ACTION_LOADING","TOGGLE_SIGNIN","signInAction","payload","type","user","token","signInActionFail","message","signInActionSuccess","signInLoading","loader","toggleSignIn","showSignIn","signIn","password","email","dispatch","fetch","process","env","REACT_APP_BACKEND_URL","method","headers","body","JSON","stringify","then","response","json","status","console","log","data","setTimeout","window","location","reload"],"mappings":"AAAA,SACEA,qBADF,EAEEC,kBAFF,EAGEC,qBAHF,EAIEC,aAJF,QAKO,0BALP;;AAOA,MAAMC,YAAY,GAAGC,OAAO,IAAI;AAC9B,SAAO;AACLC,IAAAA,IAAI,EAAEN,qBADD;AAELO,IAAAA,IAAI,EAAEF,OAAO,CAACE,IAFT;AAGLC,IAAAA,KAAK,EAAEH,OAAO,CAACG;AAHV,GAAP;AAKD,CAND;;AAQA,MAAMC,gBAAgB,GAAGC,OAAO,IAAI;AAClC,SAAO;AACLJ,IAAAA,IAAI,EAAEL,kBADD;AAELS,IAAAA;AAFK,GAAP;AAID,CALD;;AAOA,MAAMC,mBAAmB,GAAGD,OAAO,IAAI;AACrC,SAAO;AACLJ,IAAAA,IAAI,EAAEN,qBADD;AAELU,IAAAA;AAFK,GAAP;AAID,CALD;;AAMA,MAAME,aAAa,GAAGC,MAAM,IAAI;AAC9B,SAAO;AACLP,IAAAA,IAAI,EAAEJ,qBADD;AAELW,IAAAA;AAFK,GAAP;AAID,CALD;;AAMA,OAAO,MAAMC,YAAY,GAAGC,UAAU,IAAI;AACxC,SAAO;AACLT,IAAAA,IAAI,EAAEH,aADD;AAELY,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAMC,MAAM,GAAG,CAACC,QAAD,EAAWC,KAAX,KAAqB;AACzC,SAAO,MAAMC,QAAN,IAAkB;AACvB,QAAID,KAAK,IAAID,QAAb,EAAuB;AAErB,YAAMG,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,qBAAsB,mBAAtC,EAA0D;AACnEC,QAAAA,MAAM,EAAE,MAD2D;AAEnEC,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB,SAF0D;AAGnEC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBV,UAAAA,KADmB;AAEnBD,UAAAA;AAFmB,SAAf;AAH6D,OAA1D,CAAL,CAQHY,IARG,CAQEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARd,EASHF,IATG,CAUFC,QAAQ,IACNA,QAAQ,CAACE,MAAT,KAAoB,SAApB,IACKC,OAAO,CAACC,GAAR,CACC,yDADD,GAGDf,QAAQ,CAACf,YAAY,CAAC0B,QAAQ,CAACK,IAAV,CAAb,CAHP,EAIDhB,QAAQ,CAACR,mBAAmB,CAAC,gBAAD,CAApB,CAJP,EAKDyB,UAAU,CAAC,MAAM;AACfC,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,IAAvB;AACD,OAFS,EAEP,IAFO,CANd,IASIpB,QAAQ,CAACP,aAAa,CAAC,KAAD,CAAd,CApBZ,EAqBFO,QAAQ,CAACV,gBAAgB,CAAC,2BAAD,CAAjB,CArBN,CAAN;AAuBD,KAzBD,MAyBO;AACJU,MAAAA,QAAQ,CAACV,gBAAgB,CAAC,wBAAD,CAAjB,CAAR,EACD2B,UAAU,CAAC,MAAM;AACfjB,QAAAA,QAAQ,CAACV,gBAAgB,CAAC,KAAD,CAAjB,CAAR;AACD,OAFS,EAEP,IAFO,CADX;AAOF;;AAAA;AACF,GAnCC;AAqCD,CAtCM","sourcesContent":["import {\r\n  SIGNIN_ACTION_SUCCESS,\r\n  SIGNIN_ACTION_FAIL,\r\n  SIGNIN_ACTION_LOADING,\r\n  TOGGLE_SIGNIN\r\n} from \"../constants/actionTypes\";\r\n\r\nconst signInAction = payload => {\r\n  return {\r\n    type: SIGNIN_ACTION_SUCCESS,\r\n    user: payload.user,\r\n    token: payload.token\r\n  };\r\n};\r\n\r\nconst signInActionFail = message => {\r\n  return {\r\n    type: SIGNIN_ACTION_FAIL,\r\n    message\r\n  };\r\n};\r\n\r\nconst signInActionSuccess = message => {\r\n  return {\r\n    type: SIGNIN_ACTION_SUCCESS,\r\n    message\r\n  };\r\n};\r\nconst signInLoading = loader => {\r\n  return {\r\n    type: SIGNIN_ACTION_LOADING,\r\n    loader\r\n  };\r\n};\r\nexport const toggleSignIn = showSignIn => {\r\n  return {\r\n    type: TOGGLE_SIGNIN,\r\n    showSignIn\r\n  };\r\n};\r\n\r\nexport const signIn = (password, email) => {\r\n  return async dispatch => {\r\n    if (email && password) {\r\n      \r\n      await fetch(`${process.env.REACT_APP_BACKEND_URL}/auth/user/signin`, {\r\n        method: \"post\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          email,\r\n          password\r\n        })\r\n      })\r\n        .then(response => response.json())\r\n        .then(\r\n          response =>\r\n            response.status === \"success\"\r\n              ? (console.log(\r\n                  \"Welldone Genius you rememebered your login credentials!\"\r\n                ),\r\n                dispatch(signInAction(response.data)),\r\n                dispatch(signInActionSuccess(\"Login Success!\")),\r\n                setTimeout(() => {\r\n                  window.location.reload(true);\r\n                }, 2000))\r\n              : dispatch(signInLoading(false)),\r\n          dispatch(signInActionFail(\"Invalid Email or Password\"))\r\n        );\r\n    } else {\r\n     ( dispatch(signInActionFail(\"Please fill all fields\")),\r\n      setTimeout(() => {\r\n        dispatch(signInActionFail(false))\r\n      }, 2000)\r\n      )\r\n\r\n    \r\n  };\r\n};\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}