{"ast":null,"code":"import { SIGNUP_ACTION, SIGNUP_ACTION_FAIL, SIGNUP_ACTION_SUCCESS, SIGNUP_ACTION_LOADING, TOGGLE_SIGNUP } from \"../constants/actionTypes\";\n\nconst signUpAction = payload => {\n  return {\n    type: SIGNUP_ACTION,\n    user: payload.user,\n    token: payload.token\n  };\n};\n\nconst signUpActionFail = message => {\n  return {\n    type: SIGNUP_ACTION_FAIL,\n    message\n  };\n};\n\nconst signUpActionSuccess = message => {\n  return {\n    type: SIGNUP_ACTION_SUCCESS,\n    message\n  };\n};\n\nconst signUpLoading = signUpLoader => {\n  return {\n    type: SIGNUP_ACTION_LOADING,\n    signUpLoader\n  };\n};\n\nexport const toggleSignUp = showSignUp => {\n  return {\n    type: TOGGLE_SIGNUP,\n    showSignUp\n  };\n};\nexport const signUp = (firstName, lastName, email, password, phone) => {\n  return async dispatch => {\n    dispatch(signUpLoading(true));\n    await fetch(\"\".concat(process.env.REACT_APP_BACKEND_URL, \"/auth/user/signup\"), {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        firstName,\n        lastName,\n        email,\n        password,\n        phone\n      })\n    }).then(response => response.json()).then(response => response.status === \"success\" ? (dispatch(signUpAction(response.data)), dispatch(signUpActionSuccess(\"Your account has been created successfully!\")), setTimeout(() => {\n      window.location.reload(true);\n    }, 3000)) : (dispatch(signUpActionFail(response.message)), setTimeout(() => {\n      window.location.reload(true);\n    }, 2000)));\n  };\n};","map":{"version":3,"sources":["c:/Users/user/Desktop/Dae-Alright-Frontend/dae-alright/src/redux/actions/user.js"],"names":["SIGNUP_ACTION","SIGNUP_ACTION_FAIL","SIGNUP_ACTION_SUCCESS","SIGNUP_ACTION_LOADING","TOGGLE_SIGNUP","signUpAction","payload","type","user","token","signUpActionFail","message","signUpActionSuccess","signUpLoading","signUpLoader","toggleSignUp","showSignUp","signUp","firstName","lastName","email","password","phone","dispatch","fetch","process","env","REACT_APP_BACKEND_URL","method","headers","body","JSON","stringify","then","response","json","status","data","setTimeout","window","location","reload"],"mappings":"AAAA,SACEA,aADF,EAEEC,kBAFF,EAGEC,qBAHF,EAIEC,qBAJF,EAKEC,aALF,QAMO,0BANP;;AAQA,MAAMC,YAAY,GAAGC,OAAO,IAAI;AAC9B,SAAO;AACLC,IAAAA,IAAI,EAAEP,aADD;AAELQ,IAAAA,IAAI,EAAEF,OAAO,CAACE,IAFT;AAGLC,IAAAA,KAAK,EAAEH,OAAO,CAACG;AAHV,GAAP;AAKD,CAND;;AAQA,MAAMC,gBAAgB,GAAGC,OAAO,IAAI;AAClC,SAAO;AACLJ,IAAAA,IAAI,EAAEN,kBADD;AAELU,IAAAA;AAFK,GAAP;AAID,CALD;;AAOA,MAAMC,mBAAmB,GAAGD,OAAO,IAAI;AACrC,SAAO;AACLJ,IAAAA,IAAI,EAAEL,qBADD;AAELS,IAAAA;AAFK,GAAP;AAID,CALD;;AAOA,MAAME,aAAa,GAAGC,YAAY,IAAI;AACpC,SAAO;AACLP,IAAAA,IAAI,EAAEJ,qBADD;AAELW,IAAAA;AAFK,GAAP;AAID,CALD;;AAMC,OAAO,MAAMC,YAAY,GAAIC,UAAD,IAAgB;AAC3C,SAAO;AACLT,IAAAA,IAAI,EAAEH,aADD;AAELY,IAAAA;AAFK,GAAP;AAID,CALO;AAOR,OAAO,MAAMC,MAAM,GAAG,CAACC,SAAD,EAAYC,QAAZ,EAAsBC,KAAtB,EAA6BC,QAA7B,EAAuCC,KAAvC,KAAiD;AACrE,SAAO,MAAMC,QAAN,IAAkB;AACvBA,IAAAA,QAAQ,CAACV,aAAa,CAAC,IAAD,CAAd,CAAR;AACA,UAAMW,KAAK,WAAIC,OAAO,CAACC,GAAR,CAAYC,qBAAhB,wBAA0D;AACnEC,MAAAA,MAAM,EAAE,MAD2D;AAEnEC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF0D;AAKnEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBd,QAAAA,SADmB;AAEnBC,QAAAA,QAFmB;AAGnBC,QAAAA,KAHmB;AAInBC,QAAAA,QAJmB;AAKnBC,QAAAA;AALmB,OAAf;AAL6D,KAA1D,CAAL,CAaHW,IAbG,CAaEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAbd,EAcHF,IAdG,CAcEC,QAAQ,IACZA,QAAQ,CAACE,MAAT,KAAoB,SAApB,IACKb,QAAQ,CAAClB,YAAY,CAAC6B,QAAQ,CAACG,IAAV,CAAb,CAAR,EACDd,QAAQ,CACNX,mBAAmB,CAAC,6CAAD,CADb,CADP,EAID0B,UAAU,CAAC,MAAM;AACfC,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,IAAvB;AACD,KAFS,EAEP,IAFO,CALd,KAQKlB,QAAQ,CAACb,gBAAgB,CAACwB,QAAQ,CAACvB,OAAV,CAAjB,CAAR,EACD2B,UAAU,CAAC,MAAM;AACfC,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,IAAvB;AACD,KAFS,EAEP,IAFO,CATd,CAfE,CAAN;AA4BD,GA9BD;AA+BD,CAhCM","sourcesContent":["import {\r\n  SIGNUP_ACTION,\r\n  SIGNUP_ACTION_FAIL,\r\n  SIGNUP_ACTION_SUCCESS,\r\n  SIGNUP_ACTION_LOADING,\r\n  TOGGLE_SIGNUP\r\n} from \"../constants/actionTypes\";\r\n\r\nconst signUpAction = payload => {\r\n  return {\r\n    type: SIGNUP_ACTION,\r\n    user: payload.user,\r\n    token: payload.token\r\n  };\r\n};\r\n\r\nconst signUpActionFail = message => {\r\n  return {\r\n    type: SIGNUP_ACTION_FAIL,\r\n    message\r\n  };\r\n};\r\n\r\nconst signUpActionSuccess = message => {\r\n  return {\r\n    type: SIGNUP_ACTION_SUCCESS,\r\n    message\r\n  };\r\n};\r\n\r\nconst signUpLoading = signUpLoader => {\r\n  return {\r\n    type: SIGNUP_ACTION_LOADING,\r\n    signUpLoader\r\n  };\r\n};\r\n export const toggleSignUp = (showSignUp) => {\r\n  return {\r\n    type: TOGGLE_SIGNUP,\r\n    showSignUp\r\n  }\r\n}\r\n\r\nexport const signUp = (firstName, lastName, email, password, phone) => {\r\n  return async dispatch => {\r\n    dispatch(signUpLoading(true));\r\n    await fetch(`${process.env.REACT_APP_BACKEND_URL}/auth/user/signup`, {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({\r\n        firstName,\r\n        lastName,\r\n        email,\r\n        password,\r\n        phone\r\n      })\r\n    })\r\n      .then(response => response.json())\r\n      .then(response =>\r\n        response.status === \"success\"\r\n          ? (dispatch(signUpAction(response.data)),\r\n            dispatch(\r\n              signUpActionSuccess(\"Your account has been created successfully!\")\r\n            ),\r\n            setTimeout(() => {\r\n              window.location.reload(true);\r\n            }, 3000))\r\n          : (dispatch(signUpActionFail(response.message)),\r\n            setTimeout(() => {\r\n              window.location.reload(true);\r\n            }, 2000))\r\n      );\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}